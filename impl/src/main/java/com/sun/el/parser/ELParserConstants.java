/* Generated By:JJTree&JavaCC: Do not edit this line. ELParserConstants.java */
package com.sun.el.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ELParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LITERAL_EXPRESSION = 1;
  /** RegularExpression Id. */
  int START_DYNAMIC_EXPRESSION = 2;
  /** RegularExpression Id. */
  int START_DEFERRED_EXPRESSION = 3;
  /** RegularExpression Id. */
  int END_EXPRESSION = 9;
  /** RegularExpression Id. */
  int START_LAMBDA = 10;
  /** RegularExpression Id. */
  int START_LIST_E1 = 11;
  /** RegularExpression Id. */
  int END_LAMBDA = 12;
  /** RegularExpression Id. */
  int START_LIST_L1 = 13;
  /** RegularExpression Id. */
  int START_LIST_E2 = 14;
  /** RegularExpression Id. */
  int END_LIST_E1 = 15;
  /** RegularExpression Id. */
  int END_LIST_E2 = 16;
  /** RegularExpression Id. */
  int START_LIST_L2 = 17;
  /** RegularExpression Id. */
  int END_LIST_L1 = 18;
  /** RegularExpression Id. */
  int END_LIST_L2 = 19;
  /** RegularExpression Id. */
  int ARROW = 20;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 21;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 22;
  /** RegularExpression Id. */
  int EXPONENT = 23;
  /** RegularExpression Id. */
  int STRING_LITERAL = 24;
  /** RegularExpression Id. */
  int BADLY_ESCAPED_STRING_LITERAL = 25;
  /** RegularExpression Id. */
  int TRUE = 26;
  /** RegularExpression Id. */
  int FALSE = 27;
  /** RegularExpression Id. */
  int NULL = 28;
  /** RegularExpression Id. */
  int DOT = 29;
  /** RegularExpression Id. */
  int LPAREN = 30;
  /** RegularExpression Id. */
  int RPAREN = 31;
  /** RegularExpression Id. */
  int LBRACK = 32;
  /** RegularExpression Id. */
  int RBRACK = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int COMMA = 35;
  /** RegularExpression Id. */
  int GT0 = 36;
  /** RegularExpression Id. */
  int GT1 = 37;
  /** RegularExpression Id. */
  int LT0 = 38;
  /** RegularExpression Id. */
  int LT1 = 39;
  /** RegularExpression Id. */
  int GE0 = 40;
  /** RegularExpression Id. */
  int GE1 = 41;
  /** RegularExpression Id. */
  int LE0 = 42;
  /** RegularExpression Id. */
  int LE1 = 43;
  /** RegularExpression Id. */
  int EQ0 = 44;
  /** RegularExpression Id. */
  int EQ1 = 45;
  /** RegularExpression Id. */
  int NE0 = 46;
  /** RegularExpression Id. */
  int NE1 = 47;
  /** RegularExpression Id. */
  int NOT0 = 48;
  /** RegularExpression Id. */
  int NOT1 = 49;
  /** RegularExpression Id. */
  int AND0 = 50;
  /** RegularExpression Id. */
  int AND1 = 51;
  /** RegularExpression Id. */
  int OR0 = 52;
  /** RegularExpression Id. */
  int OR1 = 53;
  /** RegularExpression Id. */
  int EMPTY = 54;
  /** RegularExpression Id. */
  int INSTANCEOF = 55;
  /** RegularExpression Id. */
  int MULT = 56;
  /** RegularExpression Id. */
  int PLUS = 57;
  /** RegularExpression Id. */
  int MINUS = 58;
  /** RegularExpression Id. */
  int QUESTIONMARK = 59;
  /** RegularExpression Id. */
  int DIV0 = 60;
  /** RegularExpression Id. */
  int DIV1 = 61;
  /** RegularExpression Id. */
  int MOD0 = 62;
  /** RegularExpression Id. */
  int MOD1 = 63;
  /** RegularExpression Id. */
  int CONCAT = 64;
  /** RegularExpression Id. */
  int ASSIGN = 65;
  /** RegularExpression Id. */
  int TYPE = 66;
  /** RegularExpression Id. */
  int IDENTIFIER = 67;
  /** RegularExpression Id. */
  int IMPL_OBJ_START = 68;
  /** RegularExpression Id. */
  int LETTER = 69;
  /** RegularExpression Id. */
  int DIGIT = 70;
  /** RegularExpression Id. */
  int ILLEGAL_CHARACTER = 71;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_EXPRESSION = 1;
  /** Lexical state. */
  int IN_LAMBDA = 2;
  /** Lexical state. */
  int IN_LIST_E1 = 3;
  /** Lexical state. */
  int IN_LIST_E2 = 4;
  /** Lexical state. */
  int IN_LIST_L1 = 5;
  /** Lexical state. */
  int IN_LIST_L2 = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<LITERAL_EXPRESSION>",
    "\"${\"",
    "\"#{\"",
    "\"\\\\\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"}\"",
    "\"#{\"",
    "\"{\"",
    "\"}\"",
    "\"{\"",
    "\"{\"",
    "\"}\"",
    "\"}\"",
    "\"{\"",
    "\"}\"",
    "\"}\"",
    "\"->\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<BADLY_ESCAPED_STRING_LITERAL>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\",\"",
    "\">\"",
    "\"gt\"",
    "\"<\"",
    "\"lt\"",
    "\">=\"",
    "\"ge\"",
    "\"<=\"",
    "\"le\"",
    "\"==\"",
    "\"eq\"",
    "\"!=\"",
    "\"ne\"",
    "\"!\"",
    "\"not\"",
    "\"&&\"",
    "\"and\"",
    "\"||\"",
    "\"or\"",
    "\"empty\"",
    "\"instanceof\"",
    "\"*\"",
    "\"+\"",
    "\"-\"",
    "\"?\"",
    "\"/\"",
    "\"div\"",
    "\"%\"",
    "\"mod\"",
    "\"&\"",
    "\"=\"",
    "\"T\"",
    "<IDENTIFIER>",
    "\"#\"",
    "<LETTER>",
    "<DIGIT>",
    "<ILLEGAL_CHARACTER>",
  };

}
