/* Generated By:JJTree: Do not edit this line. AstLambdaExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.sun.el.parser;

import java.util.List;
import java.util.ArrayList;
import javax.el.ELException;
import javax.el.LambdaExpression;
import javax.el.ValueExpression;
import com.sun.el.lang.EvaluationContext;
import com.sun.el.ValueExpressionImpl;

public
class AstLambdaExpression extends SimpleNode {
    private List<String> parameters = new ArrayList<String>();

    public AstLambdaExpression(int id) {
      super(id);
    }

    public void addParam(String param) {
        parameters.add(param);
    }

    public Object getValue(EvaluationContext ctx) throws ELException {
        // Create a lambda expression
        ValueExpression expr =
            new ValueExpressionImpl("#{Lambda Expression}",
                                    this.children[0],
                                    ctx.getFunctionMapper(),
                                    ctx.getVariableMapper(),
                                    ctx.getTargetVariableMapper(),
                                    null);
        LambdaExpression lambda = new LambdaExpression(parameters, expr);
        Object ret = lambda;

        // If there are arguments following the lambda exprn, invoke it now.
        if (this.jjtGetNumChildren() > 1) {
            AstMethodArguments args = (AstMethodArguments) this.children[1];
            ret = lambda.invoke(ctx, args.getParameters(ctx));
        }
        return ret;
    }
}
/* JavaCC - OriginalChecksum=8bf24713707cc8b20500abe93c4f422b (do not edit this line) */
